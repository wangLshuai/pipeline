# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    tags:
      - v*
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          echo Hello, world!
          zip test.zip README.md

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Check if Release exists and get upload URL
        id: check_release
        run: |
          echo "Checking if release for tag ${{ github.ref_name }} already exists..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.SECRET_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          if [ "$response" == "200" ]; then
            echo "Release for tag ${{ github.ref_name }} already exists."
            echo "exists=true" >> $GITHUB_ENV
            release_info=$(curl -s -H "Authorization: token ${{ secrets.SECRET_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
            upload_url=$(echo "$release_info" | jq -r '.upload_url' | sed 's/{.*}//')  # Remove template part
            echo "upload_url=$upload_url" >> $GITHUB_ENV
          else
            echo "Release for tag ${{ github.ref_name }} does not exist."
            echo "exists=false" >> $GITHUB_ENV
          fi
          
      - name: Upload Release Asset
        if: env.exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ env.upload_url }}
          asset_path: test.zip
          asset_name: test.zip
          asset_content_type: application/zip
        run: |
          curl -X POST \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Content-Type: application/zip" \
          -T "${ASSET_PATH}" \
          "${upload_url}"
